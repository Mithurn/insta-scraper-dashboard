{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor for logging\napiClient.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`Making ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} request to ${config.url}`);\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling\napiClient.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$response;\n  console.error('API Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(error);\n});\nexport const api = {\n  // Profile endpoints\n  getProfiles: async () => {\n    const response = await apiClient.get('/api/profiles/');\n    return response.data;\n  },\n  getRankedProfiles: async (sortBy = 'followers_count', order = 'desc') => {\n    const response = await apiClient.get('/api/profiles/ranked', {\n      params: {\n        by: sortBy,\n        order\n      }\n    });\n    return response.data;\n  },\n  getProfile: async username => {\n    const response = await apiClient.get(`/api/profiles/${username}`);\n    return response.data;\n  },\n  searchProfiles: async query => {\n    const response = await apiClient.get(`/api/profiles/search/${query}`);\n    return response.data;\n  },\n  createProfile: async profileData => {\n    const response = await apiClient.post('/api/profiles/', profileData);\n    return response.data;\n  },\n  updateProfile: async (username, profileData) => {\n    const response = await apiClient.put(`/api/profiles/${username}`, profileData);\n    return response.data;\n  },\n  deleteProfile: async username => {\n    await apiClient.delete(`/api/profiles/${username}`);\n  },\n  // Scraper endpoints\n  scrapeProfiles: async request => {\n    const response = await apiClient.post('/api/scraper/profiles/sync', request);\n    return response.data;\n  },\n  scrapeProfilesBackground: async request => {\n    const response = await apiClient.post('/api/scraper/profiles', request);\n    return response.data;\n  },\n  updateAllProfiles: async () => {\n    const response = await apiClient.post('/api/scraper/update-all');\n    return response.data;\n  },\n  getScraperStatus: async () => {\n    const response = await apiClient.get('/api/scraper/status');\n    return response.data;\n  },\n  // Health check\n  healthCheck: async () => {\n    const response = await apiClient.get('/health');\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","_error$response","data","message","api","getProfiles","get","getRankedProfiles","sortBy","order","params","by","getProfile","username","searchProfiles","query","createProfile","profileData","post","updateProfile","put","deleteProfile","delete","scrapeProfiles","scrapeProfilesBackground","updateAllProfiles","getScraperStatus","healthCheck"],"sources":["/Users/mithurnjeromme/Desktop/instascrape/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor for logging\napiClient.interceptors.request.use(\n  (config) => {\n    console.log(`Making ${config.method?.toUpperCase()} request to ${config.url}`);\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for error handling\napiClient.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    console.error('API Error:', error.response?.data || error.message);\n    return Promise.reject(error);\n  }\n);\n\nexport interface Profile {\n  id: number;\n  username: string;\n  profile_name: string | null;\n  followers_count: number;\n  following_count: number;\n  posts_count: number;\n  engagement_rate: number;\n  bio: string | null;\n  profile_pic_url: string | null;\n  is_verified: number;\n  is_private: number;\n  last_updated: string;\n  created_at: string;\n}\n\nexport interface ProfileRanking {\n  rank: number;\n  username: string;\n  profile_name: string | null;\n  followers_count: number;\n  following_count: number;\n  posts_count: number;\n  engagement_rate: number;\n  is_verified: number;\n  last_updated: string;\n}\n\nexport interface ScrapeRequest {\n  usernames: string[];\n}\n\nexport interface ScrapeResponse {\n  success_count: number;\n  failed_count: number;\n  results: Array<{\n    username: string;\n    action: string;\n    error?: string;\n  }>;\n}\n\nexport const api = {\n  // Profile endpoints\n  getProfiles: async (): Promise<Profile[]> => {\n    const response = await apiClient.get('/api/profiles/');\n    return response.data;\n  },\n\n  getRankedProfiles: async (sortBy: string = 'followers_count', order: string = 'desc'): Promise<ProfileRanking[]> => {\n    const response = await apiClient.get('/api/profiles/ranked', {\n      params: { by: sortBy, order }\n    });\n    return response.data;\n  },\n\n  getProfile: async (username: string): Promise<Profile> => {\n    const response = await apiClient.get(`/api/profiles/${username}`);\n    return response.data;\n  },\n\n  searchProfiles: async (query: string): Promise<Profile[]> => {\n    const response = await apiClient.get(`/api/profiles/search/${query}`);\n    return response.data;\n  },\n\n  createProfile: async (profileData: Partial<Profile>): Promise<Profile> => {\n    const response = await apiClient.post('/api/profiles/', profileData);\n    return response.data;\n  },\n\n  updateProfile: async (username: string, profileData: Partial<Profile>): Promise<Profile> => {\n    const response = await apiClient.put(`/api/profiles/${username}`, profileData);\n    return response.data;\n  },\n\n  deleteProfile: async (username: string): Promise<void> => {\n    await apiClient.delete(`/api/profiles/${username}`);\n  },\n\n  // Scraper endpoints\n  scrapeProfiles: async (request: ScrapeRequest): Promise<ScrapeResponse> => {\n    const response = await apiClient.post('/api/scraper/profiles/sync', request);\n    return response.data;\n  },\n\n  scrapeProfilesBackground: async (request: ScrapeRequest): Promise<{ message: string }> => {\n    const response = await apiClient.post('/api/scraper/profiles', request);\n    return response.data;\n  },\n\n  updateAllProfiles: async (): Promise<{ message: string; count: number }> => {\n    const response = await apiClient.post('/api/scraper/update-all');\n    return response.data;\n  },\n\n  getScraperStatus: async (): Promise<any> => {\n    const response = await apiClient.get('/api/scraper/status');\n    return response.data;\n  },\n\n  // Health check\n  healthCheck: async (): Promise<{ status: string; service: string }> => {\n    const response = await apiClient.get('/health');\n    return response.data;\n  },\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}